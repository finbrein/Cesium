%{
#include <stdio.h>
#include "ast.h"
#include "symbol.h"
#include "exception.h"
#include "environment.h"

#define YYSTYPE ast_t *

/* 
   I fear that increasing this buffer size just masks a reallocation 
   bug in greg, but we haven't hit it yet!
*/

#define YY_BUFFER_START_SIZE 16384 

#define YY_STACK_SIZE YY_BUFFER_START_SIZE

#define YY_INPUT(buf, result, max_size, core)         \
{                                                     \
  int yyc = fgetc(stdin);                             \
  if (yyc == EOF) longjmp(exc, 2);                    \
  result = (EOF == yyc) ? 0 : (*(buf)= yyc, 1);       \
}
%}

start         = Spacing r:TopStatement { root = r; } 
                 | ( !EOL .)* EOL { root = NULL; printf("Syntax error\n"); }
TopStatement  = Symtab ';' { print_sym_tab(); }
                 | FnDec
                 | VarStmt
                 | DatatypeStmt
                 | Statement
Statement     = Spacing IfStmt
                 | Spacing WhileStmt
                 | Spacing BlockStmt
                 | Spacing r:Return ';' { $$ = r; }
                 | Spacing r:Return e:Expression ';' 
                 { 
                    $$ = r;
                    $$->child = e; 
                 }
                 | Spacing Break ';' { $$ = ast_stmt0(AST_BREAK); }
                 | Spacing Expression ';'
                 | Spacing ';'
VarStmt       = Var r:VarAssign 
                 ( Comma s:VarAssign 
              {
                s->next = r;
                 r = s;
              }
                 )* ';'
              {
                 r = ast_reverse(r);
                 $$ = ast_unary(r, AST_VARASSIGN);
              }
TypeList      = r:Identifier
                 ( Comma s:Identifier
              {
                 s->next = r;
                 r = s;
              }
                 )*
              {
                 $$ = ast_reverse(r);
              }
DatatypeStmt  = Datatype i:Identifier LParen r:TypeList RParen ';'
              {
                 $$ = ast_stmt2(i, r, AST_DATATYPE);
                 $$->env = current_scope;
              }
IfStmt        = ( If LParen e:Expression RParen s1:Statement Spacing Else s2:Statement
              { 
                 $$ = ast_stmt3(e, s1, s2, AST_IFELSE); 
              } 
                )
              | ( If LParen e:Expression RParen s1:Statement Spacing ';'
              { 
                 $$ = ast_stmt2(e, s1, AST_IF); 
              } 
                )
              | ( If LParen e:Expression RParen s1:Statement
              { 
                 $$ = ast_stmt2(e, s1, AST_IF); 
              } 
                )
Block         = ( Spacing r:VarStmt | r:Statement )
                ( ( Spacing s:VarStmt | s:Statement )
              {
                  s->next = r;
                  r = s;
              }
                )* 
              {  
                  $$ = ast_reverse(r);
              }
ExprBlock     = Spacing r:Expression
                ( ';' Spacing s:Expression 
              {
                  s->next = r;
                  r = s;
              }
                )* ';'?
              {  
                  $$ = ast_reverse(r);
              }
BlockStmt     = LBrace { scope_up(); } r:Block RBrace
              {
                  $$ = ast_unary(r, AST_BLOCK);
                  $$->env = current_scope;
                  scope_down();
              }
WhileStmt     = While LParen e:Expression RParen s1:Statement
              {
                  $$ = ast_stmt2(e, s1, AST_WHILE);
              }
ParamList     = Spacing LParen RParen { $$ = ast_stmt0(AST_NIL); }
              | Spacing LParen r:Identifier ( Comma s:Identifier 
              {
                  s->next = r;
                  r = s;
              }
                )* RParen
              {  
                  $$ = ast_reverse(r);
              }
FnDec         = Fn i:Identifier { scope_up(); } p:ParamList  LBrace b:Block RBrace
              {
                  $$ = ast_stmt3(i, ast_unary(p, AST_PARAMS), ast_unary(b, AST_FNBLOCK), AST_FNDEC);
                  $$->env = current_scope;
                  scope_down();
              }

VarAssign     = Assignment | Identifier
Place         = ( r:Identifier { r->tag = AST_LVALUE; } )
              | LParen r:Place 
                ( Comma s:Place 
              { 
                  s->next = r;
                  r = s;
              }
                 )* RParen
              {
                 r = ast_reverse(r);
                 $$ = ast_unary(r, AST_LTUPLE);
              }
Assignment    = r:Place Equals s:AssignExp
              {
                  r->next = s;
                  $$ = ast_unary(r, AST_ASSIGNMENT);
              }
SlotAssign    = r:SlotOrAppl Equals s:AssignExp
              {
                  r->next = s;
                  $$ = ast_unary(r, AST_ASSIGNMENT);
              }
LambdaExp     = Lambda { scope_up(); } p:ParamList LBrace e:ExprBlock RBrace Spacing
              {
                  $$ = ast_stmt2(ast_unary(p, AST_PARAMS), ast_unary(e, AST_EXPRBLOCK), AST_LAMBDA);
                  $$->env = current_scope;
                  scope_down();
              }
                 | Lambda { scope_up(); } p:ParamList e:Expression 
              {
                  $$ = ast_stmt2(ast_unary(p, AST_PARAMS), e, AST_LAMBDA);
                  $$->env = current_scope;
                  scope_down();
              }
Expression    = AssignExp
SimplePlace   = SlotOrAppl | Identifier
AssignExp     = SlotAssign
                 | Assignment
                 | LambdaExp
                 | ( r:SimplePlace o:PlusEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:MinusEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:TimesEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:DivEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:ModEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:AndEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:OrEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:XorEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:RshEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | ( r:SimplePlace o:LshEQ s:AssignExp { $$ = ast_binary(r, s, o); } )
                 | Infix100
Infix100      = ( r:Infix90 ( o:LogOr 
                  s:Infix90 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix90       = ( r:Infix80 ( o:LogAnd 
                  s:Infix80 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix80       = ( r:Infix70 ( o:BitOr 
                  s:Infix70 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix70       = ( r:Infix60 ( o:BitXor 
                  s:Infix60 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix60       = ( r:Infix50 ( o:BitAnd 
                  s:Infix50 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix50       = ( r:Infix40 ( ( o:EQ | o:NE ) 
                  s:Infix40 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix40       = ( r:Infix30 ( ( o:LE | o:GE | o:LT | o:GT ) 
                  s:Infix30 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix30       = ( r:Infix20 ( ( o:Lsh | o:Rsh) 
                  s:Infix20 { r = ast_binary(r, s, o); }  )* ) { $$ = r; }
Infix20       = ( r:Infix10 ( ( o:Plus | o:Minus ) 
                  s:Infix10 { r = ast_binary(r, s, o); } )* ) { $$ = r; }
Infix10       = ( r:UnaryExp ( ( o:Times | o:Div | o:Mod ) 
                  s: UnaryExp { r = ast_binary(r, s, o); } )* ) { $$ = r; }
UnaryExp      = ( Incr s:SimplePlace { $$ = ast_unary(s, AST_PRE_INC); } ) 
                 | ( Decr s:SimplePlace { $$ = ast_unary(s, AST_PRE_DEC); } ) 
                 | ( Plus UnaryExp ) 
                 | ( Minus s:UnaryExp { $$ = ast_unary(s, AST_UNMINUS); } ) 
                 | ( LogNot s:UnaryExp { $$ = ast_unary(s, AST_LOGNOT); } ) 
                 | ( BitNot s:UnaryExp { $$ = ast_unary(s, AST_BITNOT); } ) 
                 | PostfixExp 
ArgList       = LParen RParen { $$ = ast_stmt0(AST_NIL); }
                 | LParen r:Expression ( Comma s:Expression 
              {
                  s->next = r;
                  r = s;
              }
                )* RParen
              { 
                 $$ = ast_reverse(r);
              }
SlotOrAppl    = ( r:Identifier s:ArgList { r = ast_stmt2(r, s, AST_APPL); }
                 | r:Identifier Dot s:Identifier { r = ast_stmt2(r, s, AST_SLOT); } ) 
                ( s:ArgList { r = ast_stmt2(r, s, AST_APPL); } 
                 | Dot s:Identifier { r = ast_stmt2(r, s, AST_SLOT); } )*
              {
                 $$ = r;
              }
PostfixExp    = ( r:SimplePlace Incr ) { $$ = ast_unary(r, AST_POST_INC); }
                 | ( r:SimplePlace Decr ) { $$ = ast_unary(r, AST_POST_DEC); }
                 | SlotOrAppl
                 | Primary
IfExpr        = If c:Expression Then e1:Expression Else e2:Expression
              { 
                 $$ = ast_stmt3(c, e1, e2, AST_IFEXPR);
              }              
TupleExpr     = LParen r:Expression 
                ( Comma s:Expression 
              { 
                  s->next = r;
                  r = s;
              }
                 )* RParen
              {
                 r = ast_reverse(r);
                 $$ = ast_unary(r, AST_TUPLE);
              }
Primary       = ( IfExpr | Boolean | Identifier | Double | IntConst | String 
                 | ( LParen Expression RParen ) )
                 | TupleExpr

Fn            = 'fn' Spacing
Return        = < 'return' > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_RETURN);
              }
Var           = 'var' Spacing
If            = 'if' Spacing
Then          = 'then' Spacing
Else          = 'else' Spacing
While         = 'while' Spacing
Break         = 'break' Spacing
Lambda        = 'lambda' Spacing
Datatype      = 'datatype' Spacing
Symtab        = 'symtab' Spacing
Comma         = ',' Spacing
Reserved      = Var | If | Then | Else | While | Break | Lambda | Datatype | Return | Fn | Symtab
Identifier    = !Reserved < IdentStart IdentCont* > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_IDENT);
              }
IdentStart    = [a-zA-Z_]
IdentCont     = IdentStart | [0-9]
IntConst      = < Integer 'u'? ( 'b' | 'w' | 'd' | 'q' )? > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_INT);
              }
Integer       = < ( [1-9] [0-9]* | '0' ) >
String        = < Quotes ( SlashQuotes | ( !Quotes . ) )* Quotes > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_STRING);
              }
Double        = < Integer '.' [0-9]+ ( ( 'e' | 'E' ) '-'? Integer )? ( 'f' | 'd' )? > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_DOUBLE);
              }
Boolean       = True | False
Spacing       = ( Space | Comment )*
Space         = ' ' | '\t' | EOL
Comment       = Comment1 | Comment2
Comment1      = '//' ( !EOL . )* EOL 
Comment2      = '/*' ( !'*/' . )* '*/'
LParen        = '(' Spacing
RParen        = ')' Spacing
LBrace        = '{' Spacing
RBrace        = Spacing '}'
Dot           = '.' Spacing
Incr          = '++' Spacing
Decr          = '--' Spacing
Plus          = '+' Spacing { $$ = op_plus; }
Minus         = '-' Spacing { $$ = op_minus; }
LogNot        = '!' Spacing 
LogAnd        = '&&' Spacing { $$ = op_logand; }
LogOr         = '||' Spacing { $$ = op_logor; }
BitNot        = '~' Spacing
BitAnd        = '&' Spacing { $$ = op_bitand; }
BitXor        = '^|' Spacing { $$ = op_bitxor; }
BitOr         = '|' Spacing { $$ = op_bitor; }
Times         = '*' Spacing { $$ = op_times; }
Div           = '/' Spacing { $$ = op_div; }
Mod           = '%' Spacing { $$ = op_mod; }
Lsh           = '<<' Spacing { $$ = op_lsh; }
Rsh           = '>>' Spacing  { $$ = op_rsh; }
LT            = '<' Spacing { $$ = op_lt; } 
GT            = '>' Spacing { $$ = op_gt; }
LE            = '<=' Spacing { $$ = op_le; }
GE            = '>=' Spacing { $$ = op_ge; }
EQ            = '==' Spacing { $$ = op_eq; }
NE            = '!=' Spacing { $$ = op_ne; }
Equals        = '=' Spacing
PlusEQ        = '+=' Spacing { $$ = op_pluseq; }
MinusEQ       = '-=' Spacing { $$ = op_minuseq; }
TimesEQ       = '*=' Spacing { $$ = op_timeseq; }
DivEQ         = '/=' Spacing { $$ = op_diveq; }
ModEQ         = '%=' Spacing { $$ = op_modeq; }
AndEQ         = '&=' Spacing { $$ = op_andeq; }
OrEQ          = '|=' Spacing { $$ = op_oreq; }
XorEQ         = '^|=' Spacing { $$ = op_xoreq; }
RshEQ         = '>>=' Spacing { $$ = op_rsheq; }
LshEQ         = '<<=' Spacing { $$ = op_lsheq; }
True          = < 'true' > Spacing 
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_BOOL);
              }
False         = < 'false' > Spacing
              {
                 sym_t * sym = sym_lookup(yytext);
                 $$ = ast_symbol(sym, AST_BOOL);
              }
Quotes        = '"'
SlashQuotes   = '\\\"'
EOL           = '\r\n' | '\n' | '\r'
