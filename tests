Variables:
==========

var i = 1;
i;
var j;
j;
j = 1;
j;
var k, l = k;
k;
l;
var i = i;
i;
var i = 2, j = i, i = 1.2;
i;
j;
var s = 1, t = 1.2, u = s + t;
s;
t;
u;
var s = 1, t = 1.2;
s + t;
var s = s, t = 2;
var v;
var v = v;
v;
var s = s, t = s;
s;
t;
var s = s + s;
var j = i, i = 1.2;

arithmetic:
===========
1+3;
1-2;
4*2;
5/2;
17%3;
1<<12;
23>>2;
1.3+23.0;
1.1-5.0;
4.0*7.1;
9.23/1.11;
12.2%7.1;
1+(2-3*7)/3;
1+(2*3-1)<<11;
1+((2*3-1)<<11);
(1.3 - 2.2*12.0)/1.1 - 3.75;
var i = 1.2-2.0*(12.1 - 3.3*1.1), j = (i+1.1)-2.3, k = i + j - i*j;
1+2.3;
12<<1.2;
var i = 1, j = 12.3, k = i << j;
-2+4;
var i = 23, j = -i + 1;

combined arithmetic and assignment operators:
=============================================
var i = 1;
i++;
i--;
--i;
++i;
var j = 1 + ++i;

bitwise operators:
==================

12&1;
13&1;
43253425^|123324;
4358794|43878;
1+(4539|23 - (23<<1));
var i = 34587346|3468, j = i&374628, k = i^|j;
var i = 3498732|53498.2;
var i = 4587349, j = 1.2, k = i^|j;

relational operators:
=====================

1<2;
2<1;
1>2;
2>1;
1<=2;
1>=2;
1==1;
1==2;
1!=2;
var i = 1 < 2, j = 2 < 1;
var i = 1 == 2, j = 3, k = i + j;
(1 == 2) + 1;
(1 < 2) == (2 < 3);

logical operators:
==================

true;
false;
true && (1 < 2);
false || (1 < 2);
var i = true, j = false, k = i || j, l = i && j;
(1<2) && (2 < 3);
(1<2) || (3 > 2);
(2>1) || (3 >2);
(2>1) || (2 > 3);
(1>2) || (2 > 3);
var i = (1>2) || (2 > 3), j = i && (2 < 1), k = i || j && i;
!(1<2);
~12;
var i = !(1<2), j = !i;

combined operators and assignment:
==================================

var i = 1;
i += 23;
i -= 23;
i *= 2;
var j = 4;
i += j *= 2;
i/=2;
i%=4;
i|=4767;
i&=6347;
i^|=83746;
i<<=2;
i>>=2;
var i = 1.2;
i += 2.2;
i -= 1.0;
i *= 4.0;
i /= 1.1;
i %= 1.7;

control flow statements:
========================
var i = 1;
if (i == 1) i++;;
if (i == 1) i++;
;
if (i == 1) i++; else i--;
if (i == 1) i++;
else i--;
if (i == 1) if (i == 1) i++;; else if (i == 2) i--;;
{
   var i = 1;
   i++;
}
{
   var i = 1;
   var i = 1;
}
var j = 1;
{
   var j = 3;
   j++;
}
j;
if (i == 1) {
   i++; i++;
} else
{ 
  i--; i--;
}
var i = 2;
{
   var j = 4;
   i += j;
}
i;
{
   var j;
   i += j;
}
var i = 0, s = 0;
while (i < 1000000000) {
   s += i;
   i++;
}
i = s = 0;
while (i < 1000000000) s += i++;
var i = 0;
break;
{
   break;
}
while (i < 1000) break;
while (i < 1000) {
   break;
}
while (i < 1000) {
   if (i == 10) break;
   else break;
}
while (i < 1000) {
   if (i == 10) break;
   i++;
}
i;

functions:
==========

fn fac(n) {
   if (n == 1) return 1;
   return n*fac(n - 1);
}
fac(10);
fn doit(a, b) {
   return a + b;
}
doit(1, 2);
fn foo(n) {
   if (n == 1) return 1;
   return n*fac(n - 1);
}
foo(10);

fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n-1);
}
b1(10);

fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
var b2 = b1;
b2(10);
b1(10);

fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
var b2 = b1;
var b3 = b2;
b3(10);
b2(10);
b1(10);

fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
var b2 = b1;
b1(10);
b2(10);


fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
fn b2(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
b1(10);
b2(10);

fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
fn b2(n) {
   if (n == 1) return 1;
   return n*b1(n - 1);
}
b2(10);
b1(10);

fn f2(f, a) {
   return f(a);
}
fn b1(n) {
   if (n == 1) return 1;
   return n*b1(n-1);
}
f2(b1, 10);

fn f(n) {
   if (n == 1) return 1;
   return n*f(n-1);
}
fn b() {
   return f;
}
var f3 = b();
f3(10);

